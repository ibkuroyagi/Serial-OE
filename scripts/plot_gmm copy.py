# %%
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from sklearn.mixture import GaussianMixture
import umap
from sklearn.neighbors import KernelDensity
from sklearn.neighbors import NearestNeighbors


def reset_columns(df):
    df_col = df.columns
    df = df.T.reset_index(drop=False).T
    for i in range(df.shape[1]):
        rename_col = {i: "_".join(df_col[i])}
        df = df.rename(columns=rename_col)
    df = df.drop(["level_0", "level_1"], axis=0).reset_index()
    return df


def upper_mean(series):
    """Average of values from maximum to median"""
    sorted_series = sorted(series)
    upper_elements = sorted_series[len(series) // 2 :]
    return np.mean(upper_elements)


no = "020"
seed = 2
machines = ["fan", "pump", "slider", "valve", "ToyCar", "ToyConveyor"]
machine = machines[1]

other_machines = machines.copy()
other_machines.remove(machine)
if machine in ["fan", "pump", "slider", "valve"]:
    dev_section = [0, 2, 4, 6]
elif machine == "ToyCar":
    dev_section = [0, 1, 2, 3]
elif machine == "ToyConveyor":
    dev_section = [0, 1, 2]

n_plot = 100
checkpoint_dir = f"exp/{machine}/audioset_v{no}_0.15_seed{seed}/checkpoint-100epochs"
eval_df = pd.read_csv(
    os.path.join(checkpoint_dir, "checkpoint-100epochs_eval_mean.csv")
)
eval_df["fid"] = eval_df["path"].map(lambda x: int(x.split("_")[-1].split(".")[0]))
eval_df = eval_df[eval_df["fid"] < n_plot]

dcase_train_df = pd.read_csv(
    os.path.join(checkpoint_dir, "checkpoint-100epochs_dcase_train_mean.csv")
)
dcase_valid_df = pd.read_csv(
    os.path.join(checkpoint_dir, "checkpoint-100epochs_dcase_valid_mean.csv")
)
dcase_valid_df["fid"] = dcase_valid_df["path"].map(
    lambda x: int(x.split("_")[-1].split(".")[0])
)
dcase_valid_df["section"] = dcase_valid_df["path"].map(lambda x: int(x.split("_")[-2]))
dcase_valid_df["machine"] = dcase_valid_df["path"].map(lambda x: x.split("/")[2])
dcase_valid_df = dcase_valid_df[dcase_valid_df["fid"] < n_plot]

for sec in dev_section:
    print(sec)
    eval_df.loc[
        (eval_df["section"] == sec) & (eval_df["is_normal"] == 1),
        "label",
    ] = f"{sec}_normal"
    eval_df.loc[
        (eval_df["section"] == sec) & (eval_df["is_normal"] == 0),
        "label",
    ] = f"{sec}_anomaly"
    for om in other_machines:
        dcase_valid_df.loc[
            (dcase_valid_df["section"] == sec)
            & (dcase_valid_df["machine"] == om)
            & (dcase_valid_df["fid"] < n_plot // 2),
            "label",
        ] = "pseudo-anomaly"
embed_cols = ["label"] + [f"e{i}" for i in range(128)]
zeros = ["zero"] + [0 for _ in range(128)]
zero_df = pd.DataFrame([zeros], columns=embed_cols)
# %%
gmm_section = 0
n_generate = 500
cols = [f"e{i}" for i in range(128)]
df_train = pd.read_csv(f"{checkpoint_dir}/checkpoint-100epochs_valid.csv")
x_train = df_train.loc[df_train["section"] == gmm_section, cols]
gm = GaussianMixture(n_components=2, random_state=0)
gm.fit(x_train)
gen, gmmlabel = gm.sample(n_generate)
gmm_df = pd.DataFrame(gen[gmmlabel == 1], columns=cols)
gmm_df["label"] = "Generated by GMM for ID 0"
kde = KernelDensity(bandwidth=0.5)
kde.fit(x_train)
kde_gen = kde.sample(n_samples=gmmlabel.sum(), random_state=0)
kde_df = pd.DataFrame(kde_gen, columns=cols)
kde_df["label"] = "Generated by KDE for ID 0"
algorithm = "umap"
use_df = pd.concat(
    [
        eval_df[embed_cols],
        dcase_valid_df[embed_cols],
        gmm_df,
        kde_df,
        zero_df,
    ]
)
use_df = use_df[~use_df["label"].isna()]
embed = use_df[embed_cols[1:]].values
n_neighbors = 30
mapper = umap.UMAP(densmap=True, n_neighbors=n_neighbors, random_state=2022)
X_embedded = mapper.fit_transform(embed)
neigh = NearestNeighbors(n_neighbors=5)
neigh.fit(X_embedded)
d = neigh.kneighbors(X_embedded)[0].sum(-1)
label_list = sorted(list(use_df["label"].unique()))
cmap_names = ["tab20", "tab20_r", "tab20b", "tab20b_r", "tab20c", "tab20c_r"]
cm = plt.cm.get_cmap(cmap_names[0])
for inlier_name in ["GMM", "KDE", "original"]:
    plt.figure(figsize=(8, 9))
    for label in label_list:
        idx = (use_df["label"] == label) & (d < np.percentile(d, 99.5))
        id_ = label.split("_")[0]
        alpha = 0.8
        if id_ in ["0", "1", "2", "3", "4", "5", "6", "7"]:
            rgb = cm.colors[int(id_)]
            alpha = 0.7
            s = 30
            if "_normal" in label:
                marker = "o"
                plt.scatter(
                    [],
                    [],
                    label=f"ID {id_}",
                    marker="s",
                    color=rgb,
                    alpha=1.0,
                    s=s,
                )
            elif "_anomaly" in label:
                marker = "x"
            plt.scatter(
                X_embedded[idx, 0],
                X_embedded[idx, 1],
                label=None,
                marker=marker,
                color=rgb,
                alpha=alpha,
                s=s,
            )
        elif id_ == "pseudo-anomaly":
            rgb = cm.colors[8]
            alpha = 0.7
            plt.scatter(
                X_embedded[idx, 0],
                X_embedded[idx, 1],
                label="p-anomaly",
                marker="^",
                color=rgb,
                alpha=alpha,
                s=60,
            )
        elif id_ == "zero":
            rgb = cm.colors[16]
            alpha = 1
            idx = use_df["label"] == label
            marker = "D"
            s = 100
            plt.scatter(
                X_embedded[idx, 0],
                X_embedded[idx, 1],
                label=id_,
                marker=marker,
                color=rgb,
                alpha=alpha,
                s=s,
            )
        elif inlier_name in id_:
            rgb = cm.colors[12]
            alpha = 0.4
            plt.scatter(
                X_embedded[idx, 0],
                X_embedded[idx, 1],
                # label=inlier_name,
                marker="*",
                color=rgb,
                alpha=alpha,
                s=30,
            )
    if inlier_name != "original":
        plt.scatter(
            [],
            [],
            label=inlier_name,
            marker="*",
            color=cm.colors[12],
            alpha=1.0,
            s=120,
        )
    plt.scatter(
        [],
        [],
        label="normal",
        marker="o",
        color=(0.5, 0.5, 0.5),
        alpha=1.0,
        s=100,
    )
    plt.scatter(
        [],
        [],
        label="anomaly",
        marker="x",
        color=(0.5, 0.5, 0.5),
        alpha=1.0,
        s=100,
    )
    plt.legend(fontsize=19, ncol=2)
    plt.axis("off")
    plt.tight_layout()
    plt.savefig(f"exp/fig/paper_v{no}_{machine}_{inlier_name}ID{gmm_section}.png")

# %%
