# %%
import pandas as pd
import numpy as np
import os
import glob
import matplotlib.pyplot as plt
import torch
from sklearn.mixture import GaussianMixture
import h5py
import librosa
import soundfile as sf
from statistics import mean
from IPython.core.display import display
from asd_tools.utils import sigmoid
from asd_tools.utils import seed_everything
from asd_tools.utils import zscore
from sklearn.manifold import TSNE
import umap
from sklearn.neighbors import KernelDensity
from statistics import mean
from scipy.stats import hmean
from sklearn.metrics import roc_auc_score
from sklearn.neighbors import NearestNeighbors
from matplotlib.colors import LogNorm


def reset_columns(df):
    df_col = df.columns
    df = df.T.reset_index(drop=False).T
    for i in range(df.shape[1]):
        rename_col = {i: "_".join(df_col[i])}
        df = df.rename(columns=rename_col)
    df = df.drop(["level_0", "level_1"], axis=0).reset_index()
    return df


def upper_mean(series):
    """Average of values from maximum to median"""
    sorted_series = sorted(series)
    upper_elements = sorted_series[len(series) // 2 :]
    return np.mean(upper_elements)


machines = ["fan", "pump", "slider", "valve", "ToyCar", "ToyConveyor"]
machine = machines[1]

other_machines = machines.copy()
other_machines.remove(machine)
if machine in ["fan", "pump", "slider", "valve"]:
    dev_section = [0, 2, 4, 6]
elif machine == "ToyCar":
    dev_section = [0, 1, 2, 3]
elif machine == "ToyConveyor":
    dev_section = [0, 1, 2]

n_plot = 150
checkpoint_dir = f"exp/{machine}/audioset_v020_0.15_seed1/checkpoint-100epochs"
eval_df = pd.read_csv(
    os.path.join(checkpoint_dir, "checkpoint-100epochs_eval_mean.csv")
)
eval_df["fid"] = eval_df["path"].map(lambda x: int(x.split("_")[-1].split(".")[0]))
eval_df = eval_df[eval_df["fid"] < n_plot]

dcase_train_df = pd.read_csv(
    os.path.join(checkpoint_dir, "checkpoint-100epochs_dcase_train_mean.csv")
)
dcase_valid_df = pd.read_csv(
    os.path.join(checkpoint_dir, "checkpoint-100epochs_dcase_valid_mean.csv")
)
dcase_valid_df["fid"] = dcase_valid_df["path"].map(
    lambda x: int(x.split("_")[-1].split(".")[0])
)
dcase_valid_df["section"] = dcase_valid_df["path"].map(lambda x: int(x.split("_")[-2]))
dcase_valid_df["machine"] = dcase_valid_df["path"].map(lambda x: x.split("/")[2])
dcase_valid_df = dcase_valid_df[dcase_valid_df["fid"] < n_plot]

for sec in dev_section:
    print(sec)
    eval_df.loc[
        (eval_df["section"] == sec) & (eval_df["is_normal"] == 1),
        "label",
    ] = f"normal_{sec}"
    eval_df.loc[
        (eval_df["section"] == sec) & (eval_df["is_normal"] == 0),
        "label",
    ] = f"anomaly_{sec}"
    for om in other_machines:
        dcase_valid_df.loc[
            (dcase_valid_df["section"] == sec)
            & (dcase_valid_df["machine"] == om)
            & (dcase_valid_df["fid"] < n_plot // 3),
            "label",
        ] = "pseudo-anomaly"
embed_cols = ["label"] + [f"e{i}" for i in range(128)]
zeros = ["zero"] + [0 for _ in range(128)]
zero_df = pd.DataFrame([zeros], columns=embed_cols)
# %%
gmm_section = 0
cols = [f"e{i}" for i in range(128)]
df_train = pd.read_csv(f"{checkpoint_dir}/checkpoint-100epochs_valid.csv")
x_train = df_train.loc[df_train["section"] == gmm_section, cols]
gm = GaussianMixture(n_components=2, random_state=0)
gm.fit(x_train)
gen, gmmlabel = gm.sample(200)
gen_df = pd.DataFrame(gen[gmmlabel == 1], columns=cols)
gen_df["label"] = "Generated by GMM for ID 0"
algorithm = "umap"
use_df = pd.concat(
    [
        eval_df[embed_cols],
        dcase_valid_df[embed_cols],
        zero_df,
        gen_df,
    ]
)
use_df = use_df[~use_df["label"].isna()]
embed = use_df[embed_cols[1:]].values
n_neighbors = 10
mapper = umap.UMAP(densmap=True, n_neighbors=n_neighbors, random_state=2022)
X_embedded = mapper.fit_transform(embed)

neigh = NearestNeighbors(n_neighbors=5)
neigh.fit(X_embedded)
d = neigh.kneighbors(X_embedded)[0].sum(-1)
label_list = sorted(list(use_df["label"].unique()))
cmap_names = ["tab20", "tab20_r", "tab20b", "tab20b_r", "tab20c", "tab20c_r"]
cm = plt.cm.get_cmap(cmap_names[0])
plt.figure(figsize=(16, 12))
for label in label_list:
    idx = (use_df["label"] == label) & (d < np.percentile(d, 99.5))
    id_ = label.split("_")[-1]
    alpha = 0.8
    if id_ in ["0", "1", "2", "3", "4", "5", "6", "7"]:
        rgb = cm.colors[int(id_)]
        id_ = f"ID {id_}"
    elif id_ == "pseudo-anomaly":
        rgb = cm.colors[8]
    elif "GMM" in id_:
        rgb = cm.colors[12]
        alpha = 0.4
    elif id_ == "zero":
        rgb = cm.colors[16]
    s = 30
    if "normal" in label:
        marker = "o"
    elif "anomaly_" in label:
        marker = "x"
        id_ = None
    elif "train_normal" in label:
        marker = "o"
    elif "zero" == label:
        marker = "D"
        s = 200
    else:
        marker = ","
    plt.scatter(
        X_embedded[idx, 0],
        X_embedded[idx, 1],
        label=id_,
        marker=marker,
        color=rgb,
        alpha=alpha,
        s=s,
    )
plt.legend(fontsize=20)
plt.title(f"{machine} {algorithm}{n_neighbors}")
plt.tight_layout()
plt.savefig(f"exp/fig/audioset_v020_0.15_seed1_{machine}_gmmID{gmm_section}.png")

# %%
